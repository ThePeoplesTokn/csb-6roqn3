{"version":3,"sources":["TransactionInputs.js","App.js","reportWebVitals.js","index.js"],"names":["DepositInput","props","handleClick","value","state","transactionValue","setState","msg","onClick","handleChange","e","target","test","wrapperRef","React","createRef","handleClickOutside","bind","document","addEventListener","this","removeEventListener","event","current","contains","className","ref","onChange","type","placeholder","Component","WithdrawInput","balance","option","deselect","id","checked","htmlFor","App","connect","a","window","ethereum","isConnected","loadBlockChainData","error","request","method","Web3","web3","eth","net","getId","networkId","deployedNetwork","Bank","networks","params","chainId","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","blockExplorerUrls","console","log","address","bankAddress","bank","Contract","abi","getAccounts","accounts","account","updateBalance","connected","deposit","amount","utils","toWei","methods","send","from","catch","withdraw","withdrawWithInterest","getBalance","walletBalance","fromWei","Math","round","call","bankBalance","token","network","main","Tab","Container","defaultActiveKey","Row","Col","Nav","variant","Item","Link","eventKey","Content","Pane","transactionType","href","rel","alt","src","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5f643e83.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n/**\n * Provides a UI for deposit requests\n */\nexport class DepositInput extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            transactionValue: ''\n        };\n        this.wrapperRef = React.createRef();\n        this.handleClickOutside = this.handleClickOutside.bind(this);\n    }\n\n    UNSAFE_componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    UNSAFE_componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    /**\n     * Clear error message on click outside component\n     */\n    handleClickOutside(event) {\n        if (this.wrapperRef && !this.wrapperRef.current.contains(event.target)) {\n            this.setState({ msg: ''});\n        }\n    }\n\n    /**\n     * Call one of the App transaction methods passed in props, passing valid input as argument\n     */\n    handleClick = () => {\n        const value = this.state.transactionValue;\n        if (value === '' || value === 0) {\n            this.setState({ msg: 'Please enter an amount'});\n        } else if (value) {\n            this.setState({ msg: ''});\n            const success = this.props.onClick(value);\n            // Remove number from input field if transaction is successful\n            if (success) {\n                this.setState({ transactionValue: '' });\n            }\n        }\n    }\n\n    /**\n     * Check for valid numerical input, numbers are limited to two decimal places.\n     * @param {*} e - input change event\n     */\n    handleChange = (e) => {\n        const regCheck = /^\\d+(\\.\\d{0,2})?$/;\n        const value = e.target.value;\n        if (value === '' || regCheck.test(value)) {\n            this.setState({ transactionValue: e.target.value })\n        } \n    }\n\n    render() {\n        return (\n        <div className=\"transaction-input\" ref={this.wrapperRef}>\n            <p className=\"transaction-description\">How much do you what to deposit?</p>\n            <p className=\"transaction-description\">(min. amount is <span className=\"numeric-field\">0.01</span>)</p>\n            <input className=\"transaction-input-field\" onChange={this.handleChange} type=\"text\" value={this.state.transactionValue} placeholder=\"amount...\"></input>\n            <button className=\"transaction-button\" onClick={this.handleClick}>Confirm</button>\n            <p className=\"error-message\">{this.state.msg}</p>\n        </div>\n        );\n    }\n}\n\n\n/**\n * Provides a UI for withdraw requests\n */\nexport class WithdrawInput extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            option: false,\n            msg: ''\n        };\n        this.wrapperRef = React.createRef();\n        this.handleClickOutside = this.handleClickOutside.bind(this);\n    }\n\n    UNSAFE_componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    UNSAFE_componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    /**\n     * Clear error message on click outside component\n     */\n    handleClickOutside(event) {\n        if (this.wrapperRef && !this.wrapperRef.current.contains(event.target)) {\n            this.setState({ msg: ''});\n        }\n    }\n\n    /**\n     * Call the withdraw method with option passed in props.\n     */\n    handleClick = () => {\n        if (this.props.balance === 0) {\n            this.setState({ msg: 'Insuffient funds' });\n        } else {\n            this.props.onClick(this.state.option);\n            this.setState({ msg: '' });\n        }\n    }\n\n    /**\n     * Changes the radio buttons's checked status\n     */\n    handleChange = () => {\n        if (this.state.option) this.setState({ option: false });\n        else this.setState({ option: true });\n    }\n\n    /**\n     * Handles onClick for the radio button\n     */\n    deselect = () => {\n        if (this.state.option) this.handleChange();\n    }\n\n    render() {\n        return (\n            <div className=\"transaction-input\" ref={this.wrapperRef}>\n                <p className=\"transaction-description\">Withdraw all funds from your account?</p>\n                <input type=\"radio\" id=\"add-token\" onClick={this.deselect} onChange={this.handleChange} checked={this.state.option} value=\"receive token interest\"/>\n                <label htmlFor=\"add-token\">&nbsp; add interest </label>\n                <button className=\"transaction-button\" onClick={this.handleClick}>Confirm</button>\n                <div className=\"error-message\">{this.state.msg}</div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { Row, Col, Tab, Nav } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Web3 from \"web3\";\nimport Bank from \"./abis/Bank.json\";\nimport { DepositInput, WithdrawInput } from \"./TransactionInputs\";\n\n/**\n * Main app component\n */\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      web3: \"\",\n      account: \"\",\n      walletBalance: 0,\n      bankBalance: 0,\n      bankAddress: null,\n      bank: null,\n      token: null,\n      network: null,\n      connected: false\n    };\n  }\n\n  UNSAFE_componentDidMount() {\n    this.connect();\n  }\n\n  /**\n   * Checks if a user is logged into MetaMask.\n   * If logged in loads block chain data.\n   * Else, waits for the user to choose to connect with connect button - no unprovoked pop-ups.\n   */\n  connect = async () => {\n    try {\n      const connected = window.ethereum.isConnected();\n      if (!connected) {\n        // User is not logged in - show connect button\n      } else {\n        // User is logged in - load block chain data\n        this.loadBlockChainData();\n      }\n    } catch (error) {\n      // User is not logged in - show connect button\n    }\n  };\n\n  /**\n   * Load blockchain data from MetaMask - account addresses, balances etc.\n   * Also checks that the right network is connected in MetaMask\n   */\n  loadBlockChainData = async () => {\n    if (window.ethereum) {\n      // Calls MetaMask pop-up\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      window.web3 = await new Web3(window.ethereum);\n      this.setState({ web3: window.web3 });\n\n      // Load Bank contract - get balance for the user\n      let networkId = await window.web3.eth.net.getId();\n      let deployedNetwork = Bank.networks[networkId];\n      if (!deployedNetwork) {\n        try {\n          // Add the TestNet chain if necessary\n          await window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n              {\n                chainId: \"0x61\",\n                chainName: \"Smart Chain - Testnet\",\n                rpcUrls: [\"https://data-seed-prebsc-1-s1.binance.org:8545\"],\n                nativeCurrency: {\n                  name: \"BNB\",\n                  symbol: \"BNB\",\n                  decimals: 18\n                },\n                blockExplorerUrls: [\"https://testnet.bscscan.com\"]\n              }\n            ]\n          });\n\n          // Switch chain\n          await window.ethereum.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{ chainId: \"0x61\" }]\n          });\n\n          // reassign network variables\n          networkId = await window.web3.eth.net.getId();\n          deployedNetwork = Bank.networks[networkId];\n        } catch (error) {\n          console.log(\"Please change network with MetaMask\");\n        }\n      }\n      if (deployedNetwork) {\n        const address = deployedNetwork.address;\n        this.setState({ bankAddress: address });\n        this.setState({\n          bank: new window.web3.eth.Contract(\n            Bank.abi,\n            deployedNetwork && address\n          )\n        });\n\n        // Get user's address and update user's balance\n        const accounts = await this.state.web3.eth.getAccounts();\n        this.setState({ account: accounts[0] });\n        this.updateBalance();\n      }\n      this.setState({ connected: true });\n    } else {\n      console.log(\"Please install MetaMask to continue\");\n    }\n  };\n\n  /**\n   * Deposits funds into a user's bank account. Users can make multiple deposits.\n   * Input is parsed in the DepositInput component to allow a minimum deposit amount of 0.01\n   * @param {*} amount - the amount to deposit\n   * @returns true if successful, false otherwise\n   */\n  deposit = async (amount) => {\n    const { web3, bank, account } = this.state;\n    const value = web3.utils.toWei(amount, \"ether\");\n\n    // Send Request\n    await bank.methods\n      .deposit()\n      .send({\n        from: account,\n        value: value\n      })\n      .catch((error) => {\n        return false;\n      });\n\n    // Update balance in window\n    this.updateBalance();\n    return true;\n  };\n\n  /**\n   * Withdraws all funds from a user's bank account, and transfers tokens if selected\n   * @param {*} method - if true, the transaction withdraws with added token,\n   * otherwise it withdraws without added token interest\n   * @returns true if withdraw was successfull, false otherwise.\n   */\n  withdraw = async (method) => {\n    const { bank, account } = this.state;\n\n    if (!method) {\n      // Withdraw\n      await bank.methods\n        .withdraw()\n        .send({\n          from: account\n        })\n        .catch((error) => {\n          return false;\n        });\n    } else {\n      // Withdraw with token interest\n      await bank.methods\n        .withdrawWithInterest()\n        .send({\n          from: account\n        })\n        .catch((error) => {\n          return false;\n        });\n    }\n\n    // Update balance in window\n    this.updateBalance();\n    return true;\n  };\n\n  /**\n   * Upadates the user's balance display after a transaction.\n   */\n  updateBalance = async () => {\n    const { web3, bank, account } = this.state;\n    let walletBalance, bankBalance;\n\n    // Get wallet balance\n    walletBalance = web3.utils.fromWei(\n      await web3.eth.getBalance(account),\n      \"ether\"\n    );\n    walletBalance = Math.round(walletBalance * 100) / 100;\n    this.setState({ walletBalance: walletBalance });\n\n    // Bet BNB-Bank balance\n    bankBalance = await bank.methods.getBalance().call({ from: account });\n    bankBalance = web3.utils.fromWei(bankBalance, \"ether\");\n    bankBalance = Math.round(bankBalance * 100) / 100;\n    this.setState({ bankBalance: bankBalance });\n  };\n\n  render() {\n    // There are three cases that the App renders:\n    // 1. The user is connected to MetaMask, but the wrong network\n    // 2. The user is connected to MetMask and the correct network\n    // 3. The user is not connected to MetaMask\n\n    let main;\n    if (this.state.connected) {\n      // 1. The user is connected to MetaMask, but the wrong network\n      // Should change network automatically, but message to change enetwork is displayed if not\n      if (this.state.web3 === \"\") {\n        main = (\n          <div className=\"main\">\n            <p id=\"change-network\">\n              To continue, please select the Testnet network in MetaMask\n            </p>\n          </div>\n        );\n      } else {\n        // 2. The user is connected to MetMask and the correct network\n        // Renders the main content of the website - deposit and withdraw features\n        main = (\n          <div className=\"main\">\n            <div id=\"address\">\n              <p>Your Address: </p>\n              <p id=\"address-hash\" className=\"numeric-field\">\n                {this.state.account}\n              </p>\n            </div>\n            {/* <p><b>Wallet: </b><span className=\"numeric-field\">{this.state.walletBalance}</span> BNB</p> */}\n            <div id=\"balance\">\n              <p>\n                Bank balance:{\" \"}\n                <span className=\"numeric-field\">\n                  {this.state.bankBalance} BNB\n                </span>{\" \"}\n              </p>\n            </div>\n\n            <div id=\"transactions\">\n              <Tab.Container\n                id=\"transaction-selection\"\n                defaultActiveKey=\"first\"\n              >\n                <Row className=\"row\">\n                  <Col className=\"col\">\n                    <Nav variant=\"pills\" className=\"flex-column\">\n                      <Nav.Item>\n                        <Nav.Link className=\"tabs\" eventKey=\"first\">\n                          Deposit\n                        </Nav.Link>\n                      </Nav.Item>\n                      <Nav.Item>\n                        <Nav.Link className=\"tabs\" eventKey=\"second\">\n                          Withdraw\n                        </Nav.Link>\n                      </Nav.Item>\n                    </Nav>\n                  </Col>\n                  <Col className=\"col\">\n                    <Tab.Content className=\"tab-content\">\n                      <Tab.Pane eventKey=\"first\">\n                        <DepositInput\n                          className=\"top\"\n                          transactionType={\"Deposit\"}\n                          onClick={this.deposit}\n                        />\n                      </Tab.Pane>\n                      <Tab.Pane eventKey=\"second\">\n                        <WithdrawInput\n                          className=\"top\"\n                          transactionType={\"Withdraw\"}\n                          onClick={this.withdraw}\n                          balance={this.state.bankBalance}\n                        />\n                      </Tab.Pane>\n                    </Tab.Content>\n                  </Col>\n                </Row>\n              </Tab.Container>\n            </div>\n          </div>\n        );\n      }\n    } else {\n      // 3. The user is not connected to MetaMask\n      // Renders a prompt to connect with MetaMask\n      main = (\n        <div className=\"main\">\n          <p id=\"login\">Connect with MetaMask to continue.</p>\n\n          <button id=\"connect-button\" onClick={this.loadBlockChainData}>\n            Connect\n          </button>\n\n          <p id=\"install-link\">\n            Don't have MetaMask installed? Get it{\" \"}\n            <a\n              href=\"https://metamask.io/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              here\n            </a>\n            .\n          </p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"app-header\">\n          <img\n            className=\"logo\"\n            alt=\"Palm tree logo\"\n            src={process.env.PUBLIC_URL + \"/palm_tree_medium.png\"}\n          />\n\n          <h1 id=\"welcome\">Welcome to BNB Bank</h1>\n        </div>\n\n        {main}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}